# -*- coding: utf-8 -*-
"""SPAM MAIL DEDECTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J7ckb87MYN_KE_q27_0kThDDJwb8yKWw
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.feature_extraction.text import TfidfVectorizer

#loading the data from csv file from pandas dataframe
raw_mail_data = pd.read_csv('/content/mail_data - mail_data.csv')

print(raw_mail_data)

#replace the null values with a null string
mail_data=raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.head()

mail_data.tail()

#shape of the data
mail_data.shape

#label encoding of spam mail as o,ham mail as 1
mail_data.loc[mail_data['Category']=='spam','Category',]=0
mail_data.loc[mail_data['Category']=='ham','Category',]=1

#separating the data as text and label
X=mail_data['Message']
Y=mail_data['Category']

print(X)

print(Y)

#training and testing data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=3)

print(X)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

#transform the text data to freature vectors that can be used as input
#transform the text data to freature vectors that can be used as input
feature_extraction=TfidfVectorizer(min_df=1,stop_words='english',lowercase=True) # Changed 'True' to True

X_train_features=feature_extraction.fit_transform(X_train)
X_test_features=feature_extraction.fit_transform(X_test)

Y_train=Y_train.astype('int')
Y_test=Y_test.astype('int')

print(X_train)

print(X_train_features)

#traing the logistic regressiom
model=LogisticRegression()

model.fit(X_train_features,Y_train)

#prediction on training data
prediction_on_training_data=model.predict(X_train_features)
accuracy_on_training_data=accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy on training data:', accuracy_on_training_data)

#prediction on test data
prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score (Y_test, prediction_on_test_data)

feature_extraction = TfidfVectorizer()
feature_extraction.fit(X_train)

input_mail=["Nah I don't think he goes to usf, he lives around here though"]
input_data_features=feature_extraction.transform(input_mail)
prediction=model.predict(input_data_features)
print(prediction)

if prediction[0]==1:
  print('ham mail')
else:
  print('spam mail')

